AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation template to launch EC2 Instnace in VPC with Public and Private Subnets
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
      Description: WebServer EC2 instance type
      Type: String
      Default: t3.small
      AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
        t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
        m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
        c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
        g3.8xlarge,
        r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
        i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
        d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
      ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'          
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: FirstCF-VPC
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
        - Key: Name
          Value: FirstCF-VPC-IG
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: publicsubnet-a
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: publicsubnet-b      
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: Name
        Value: privatesubnet-a    
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Name
        Value: privatesubnet-b       
#publicroutetable     
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: publicroutetable-myCF
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway      
#NAT GATEWAY
# A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance. 
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIPAddress
    Properties:
        AllocationId:
          Fn::GetAtt:
          - ElasticIPAddress
          - AllocationId
        SubnetId:
          Ref: PublicSubnetA
        Tags:
        - Key: Name
          Value: natgatewayforCF
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: myVPCGatewayAttachment
    Properties:
      Domain: myVPC
# Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: myVPC
      Tags:
      - Key: Name
        Value: privateroutetable-myCF        
  PrivateRoute: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
          Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
          #traffic through the NAT Gateway
      NatGatewayId:
          Ref: NATGateway 
  SubnetAPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  SubnetBPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable  
  SubnetAPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable  
  SubnetBPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable
#SecurtiyGroupFrom the VPC and Ec2 Instnace
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myVPC-SG
      GroupDescription: Enable SSH access via port 22 and httpd port 80
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0    
#Ec2 instance with public subnet        
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId:
        Ref: LatestAmiId
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination : true
          SubnetId:
            Ref: PublicSubnetA
          DeviceIndex: 0
          GroupSet: 
            - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            yum -y update
            # install apache
            yum install httpd -y  
            # start server
            systemctl start httpd
            systemctl enable httpd
            echo "<h1> Welcome To AWS EC2 Instance With Public and Private Subnets</h1>" >> /var/www/html/index.html
      Tags:
        - Key: Name
          Value: My EC2 Instance
        - Key: Type
          Value: Worker Instance

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'Ec2Instance'
  WebServerPublicIPAddress:
    Description: 'The public IP address of the EC2 Instance.'
    Value: !GetAtt Ec2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Public-DNS-Address'     
