AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation template to launch EC2 Instnace in VPC with Public and Private Subnets
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by Bibin Joseph",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZoneA", "pubSubnetCIDRA", "pubAvailabilityZoneB", "pubSubnetCIDRB", "privAvailabilityZoneB", "privSubnetCIDRB"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstanceName", "WebServerCapacity", "InstanceType", "Environment"]
       },
      {
        "Label": { "default": "RDS Instance Configuration" },
        "Parameters": ["DBInstanceId", "DBName", "DBEngine", "DBUserName", "DBUserPass", "DBStorage", "DBInstanceClass"]
      }
      ]
    }
  }
Parameters:
  CidrBlock:
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
    Default: 192.168.0.0/16 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pubAvailabilityZoneA:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDRA:
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
    Default: 192.168.1.0/24 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pubAvailabilityZoneB:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDRB:
    Description: VPC CIDR Block for the Public Subnet B (eg 10.0.0.0/24)
    Type: String
    Default: 192.168.2.0/24 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'  
  InstanceName:
    Type: String
  WebServerCapacity:
    Default: 1
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: 1
    MaxValue: 5
    ConstraintDescription: must be between 1 and 5 EC2 instances

  InstanceType:
      Description: EC2 instance type
      Type: String
      Default: t3.micro
      AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
        t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
        m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
        c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
        g3.8xlarge,
        r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
        i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
        d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Environment:
    Description: Application environment for which this network is being created. e.g. Development/Production.
    Type: String
    Default: UAT
    AllowedValues: ["UAT", "DEV", "QA", "PROD"]    
  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.   

Mappings: 
  RegionMap: 
    us-east-1: 
      HVMU: "ami-09d95fab7fff3776c"
      HVMR: "ami-6869aa05"
    ap-south-1: 
      HVMU: "ami-02d55cb47e83a99a0"
      HVMR: "ami-052c08d70def0ac62"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: FirstCF-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myVPC      
  #publicroutetable     
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: Publicroutetable-myCF    
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable             
  pubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: pubAvailabilityZoneA
      CidrBlock: 
        Ref: pubSubnetCIDRA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZoneA}]
      VpcId:
        Ref: myVPC      
  pubSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: pubAvailabilityZoneB
      CidrBlock: 
        Ref: pubSubnetCIDRB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Ref: AWS::StackName
                - Ref: pubAvailabilityZoneB
      VpcId: 
        Ref: myVPC            
  pubSubnetAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: pubSubnetA  
  pubSubnetAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: pubSubnetB    

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
      VpcId: !Ref myVPC     
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC                     
#Ec2 instance with public subnet        
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref pubSubnetA
        - !Ref pubSubnetB    
      SecurityGroups:
      - Ref: ALBSecurityGroup         
  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP" 

  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: TargetGroup-1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref myVPC     

  LoadBalancerAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        Namespace: AWS/ApplicationELB
        Dimensions:
          - Name: LoadBalancer
            Value: !GetAtt 
              - ApplicationLoadBalancer
              - LoadBalancerFullName
          - Name: TargetGroup
            Value: !GetAtt 
              - TargetGroup1
              - TargetGroupFullName
        MetricName: UnHealthyHostCount
        Period: 60
        Statistic: Average
        ComparisonOperator: GreaterThanThreshold
        Threshold: 0
        EvaluationPeriods: 1      

 #######AUTOSCALING 
  myASGServeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install: [install_cfn, install_app, verify_instance_health]
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.myASGServeLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource myASGServeLaunchConfiguration --configsets full_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_app:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join
                - ''
                - - '<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>'
                  - '<p>Version: 2.0</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        verify_instance_health:
          commands:
            ELBHealthCheck:
              command: !Sub
                'until [ "$state" == "\"InService\"" ]; do state=$(aws --region ${AWS::Region} elb describe-instance-health
                 --load-balancer-name ${ApplicationLoadBalancer}
                 --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                 --query InstanceStates[0].State); sleep 10; done'
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap
        - RegionMap
        - Ref: AWS::Region
        - HVMR
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      IamInstanceProfile: !Ref 'WebServerInstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource myASGServeLaunchConfiguration --configsets full_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource myASGServerGroup --region ${AWS::Region}

  myASGServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myASGServerGroup
      VPCZoneIdentifier: 
        - !Ref pubSubnetA
        - !Ref pubSubnetB
      TargetGroupARNs:
        - !Ref TargetGroup1   
      LaunchConfigurationName: !Ref myASGServeLaunchConfiguration
      MinSize: '2'
      MaxSize: '5'     
      DesiredCapacity: !Ref WebServerCapacity
      HealthCheckGracePeriod: 300
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'     
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: myASGServerGroup
      Cooldown: '1'
      ScalingAdjustment: '1'
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: myASGServerGroup
      Cooldown: '1'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance Scale-up if CPU > 50% for 5 minutes
        is down
      Period: '600'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: myASGServerGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLOW:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance Scale-down if CPU < 10% for 5 minutes
        is down
      Period: '600'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: myASGServerGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'DescribeHealthRole']
  DescribeHealthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: describe-instance-health-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DescribeInstanceHealth']
            Resource: '*'



Outputs:
  LoadBalancer:
    Value: !Ref ApplicationLoadBalancer
  TargetGroup1:
    Value: !Ref TargetGroup1
  ListenerArn:
    Value: !Ref HTTPlistener
  LoadBalancersAssociatedWithTargetGroup1:
    Description: LoadBalancers associated with TargetGroup
    Value: !Select 
      - '0'
      - !GetAtt 
        - TargetGroup1
        - LoadBalancerArns
  TargetGroupFullName1:
    Description: FullName of TargetGroup1
    Value: !GetAtt 
      - TargetGroup1
      - TargetGroupFullName
