AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation template to launch EC2 Instnace in VPC with Public and Private Subnets
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by Bibin Joseph",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZone", "pubSubnetCIDR", "privAvailabilityZoneA", "privSubnetCIDRA", "privAvailabilityZoneB", "privSubnetCIDRB"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstanceName", "InstanceType", "Environment"]
       },
      {
        "Label": { "default": "RDS Instance Configuration" },
        "Parameters": ["DBInstanceId", "DBName", "DBEngine", "DBUserName", "DBUserPass", "DBStorage", "DBInstanceClass"]
      }
      ]
    }
  }
Parameters:
  CidrBlock:
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
    Default: 192.168.0.0/16 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
    Default: 192.168.1.0/24 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  privAvailabilityZoneA:
    Description: The AvailabilityZone to use for the Second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDRA:
    Description: VPC CIDR Block for the Private Subnet (eg 10.0.0.0/24)
    Type: String
    Default: 192.168.2.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  privAvailabilityZoneB:
    Description: The AvailabilityZone to use for the Second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDRB:
    Description: VPC CIDR Block for the Private Subnet (eg 10.0.0.0/24)
    Type: String
    Default: 192.168.3.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'    
  InstanceName:
    Type: String
  InstanceType:
      Description: EC2 instance type
      Type: String
      Default: t3.micro
      AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
        t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
        m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
        m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
        c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
        g3.8xlarge,
        r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
        i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
        d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Environment:
    Description: Application environment for which this network is being created. e.g. Development/Production.
    Type: String
    Default: UAT
    AllowedValues: ["UAT", "DEV", "QA", "PROD"]    
  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.      
  DBInstanceId:
    Description: "The RDS DB Instance Identifier"
    Type: String
    Default: "rds-mysql-inst01"
    ConstraintDescription: Must be a valid RDS instance ID

  DBName:
    Description: "The RDS DB Instance Name"
    Type: String
    Default: "wpdb01"
    ConstraintDescription: No Special Characters

  DBEngine:
    Description: "The RDS DB Engine Type"
    Type: String
    Default: "MySQL"
    ConstraintDescription: Must be a valid RDS Engine Type

  DBUserName:
    Description: "The RDS DB Instance UserName"
    Type: String
    Default: "dbuser"
    ConstraintDescription: No Special Characters

  DBUserPass:
    Description: "The RDS DB Instance Password"
    Type: String
    Default: "dbuserpass"
    ConstraintDescription: Choose wisely

  DBStorage:
    Description: "The RDS DB Size in GB"
    Type: String
    Default: "20"
    ConstraintDescription: Storage in GBs

  DBInstanceClass:
    Description: "The RDS DB Instance Type"
    Type: String
    Default: "db.t2.micro"
    ConstraintDescription: Must be a valid RDS instance Class



Mappings: 
  RegionMap: 
    us-east-1: 
      HVMU: "ami-09d95fab7fff3776c"
      HVMR: "ami-09d95fab7fff3776c"
    ap-south-1: 
      HVMU: "ami-02d55cb47e83a99a0"
      HVMR: "ami-052c08d70def0ac62"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: FirstCF-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myVPC      
  #publicroutetable     
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: Publicroutetable-myCF    
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable                
#NAT GATEWAY
# A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance. 
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIPAddress
    Properties:
        AllocationId:
          Fn::GetAtt:
          - ElasticIPAddress
          - AllocationId
        SubnetId:
          Ref: pubSubnet
        Tags:
        - Key: Name
          Value: natgatewayforCF
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: myVPC
# Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: myVPC
      Tags:
      - Key: Name
        Value: Privateroutetable-myCF        
  PrivateRoute: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
          Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
          #traffic through the NAT Gateway
      NatGatewayId:
          Ref: NATGateway 
  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: pubAvailabilityZone
      CidrBlock: 
        Ref: pubSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId:
        Ref: myVPC      
  privSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: privAvailabilityZoneA
      CidrBlock: 
        Ref: privSubnetCIDRA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Ref: AWS::StackName
                - Ref: privAvailabilityZoneA
      VpcId: 
        Ref: myVPC    
  privSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: privAvailabilityZoneB
      CidrBlock: 
        Ref: privSubnetCIDRB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Ref: AWS::StackName
                - Ref: privAvailabilityZoneB
      VpcId: 
        Ref: myVPC         
  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: pubSubnet    
  privSubnetAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: privSubnetA    
  privSubnetAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: privSubnetB             
    #SecurtiyGroupFrom the VPC and Ec2 Instnace
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myVPC-SG
      GroupDescription: Enable SSH access via port 22 and httpd port 80
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0    
#Ec2 instance with public subnet        
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_Webserver
            - wordpress_config
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd: []
              php: []
              php-mysqli: []
              curl: []
              tar: []
            sources:
              /var/www/html: 'https://wordpress.org/latest.tar.gz'
          files:
            /tmp/create_site_conf.sh:
              content: |
                #!/bin/bash -xe
                if [ ! -f /etc/httpd/conf.d/wp.conf ]; then
                  touch /etc/httpd/conf.d/wp.conf
                  echo 'ServerName https://127.0.0.1' >> /etc/httpd/conf.d/wp.conf
                  echo 'DocumentRoot /var/www/wordpress/' >> /etc/httpd/conf.d/wp.conf
                  echo 'ServerSignature off' >> /etc/httpd/conf.d/wp.conf
                  echo 'ServerTokens Prod' >> /etc/httpd/conf.d/wp.conf
                  echo 'Header unset Server' >> /etc/httpd/conf.d/wp.conf
                  echo '<Directory /var/www/wordpress/blog>' >> /etc/httpd/conf.d/wp.conf
                  echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/wp.conf
                  echo '  AllowOverride All' >> /etc/httpd/conf.d/wp.conf
                  echo '  Require all granted' >> /etc/httpd/conf.d/wp.conf
                  echo '</Directory>' >> /etc/httpd/conf.d/wp.conf
                  echo 'expose_php = Off' >> /etc/php-7.3.d/70-disable_poweredby.ini
                fi
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        wordpress_config: 
          files:
            /tmp/wordpress_config.sh:
              content:
                !Join [
                  "",[
                  "#!/bin/bash -xe\n",
                  "cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php\n",
                  "sed -i s/database_name_here/", Ref: DBName, "/g /var/www/html/wp-config.php\n",
                  "sed -i s/username_here/", Ref: DBUserName, "/g /var/www/html/wp-config.php\n",
                  "sed -i s/password_here/", Ref: DBUserPass, "/g /var/www/html/wp-config.php\n",
                  "sed -i \"s/'localhost'/'", !GetAtt MyRDDBServer.Endpoint.Address,  "/g /var/www/html/wp-config.php\n",
                  ]
                ]   
              mode: 000500
              owner: root
              group: root
          commands:
            wordpress_config:
              command: ./wordpress_config.sh
              cwd: /tmp
              ignoreErrors: true
    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId: !FindInMap
        - RegionMap
        - Ref: AWS::Region
        - HVMR
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
        - NetworkInterfaceId:
            Ref: NetworkInterfacesEC2
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: My EC2 Instance
        - Key: Type
          Value: Worker Instance        
  EIPAddressEC2: #create elastic ip EC2 instance
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAddressEC2Association:
    Type: AWS::EC2::EIPAssociation #attach the elastic ip to the instance
    Properties:
      AllocationId: 
          Fn::GetAtt: # Fn::GetAtt is used to get an attribute inside a resource.
          - EIPAddressEC2
          - AllocationId
      NetworkInterfaceId: #We use Ref attribute to get the reference of a resource.
        Ref: NetworkInterfacesEC2
  NetworkInterfacesEC2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Ref: pubSubnet
      Description: Interface for controlling traffic such as SSH
      GroupSet: 
      - Ref: WebSecurityGroup
      SourceDestCheck: true
      Tags:
      - Key: Network
        Value: Control      
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myRDS-SG
      GroupDescription: Frontend Access - Enable EC2 to access RDS(MySQL) access via port 3306
      VpcId: 
        Ref: myVPC
  DBInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - WebSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
  myRDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Create DB Subnet Group FOR Ec2 Instnace
      SubnetIds: 
        - Ref: privSubnetA
        - Ref: privSubnetB
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, "RDS", {Ref: privAvailabilityZoneA}]

  MyRDDBServer:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 
        Ref: DBInstanceId
      DBName: 
        Ref: DBName
      DBInstanceClass: 
        Ref: DBInstanceClass
      AllocatedStorage: 
        Ref: DBStorage
      Engine: 
        Ref: DBEngine
      EngineVersion: 8.0.16
      MasterUsername: 
        Ref: DBUserName
      MasterUserPassword: 
        Ref: DBUserPass
      DBSubnetGroupName:
        Ref: myRDBSubnetGroup  
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
     


Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'Ec2Instance'
  WebServerPublicIPAddress:
    Description: 'The public IP address of the EC2 Instance.'
    Value: !GetAtt Ec2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Public-DNS-Address'     
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref 'EIPAddressEC2' 
  RDSEndPoint:
    Description: 'The RDS Endpoint of MySQL DB'
    Value: !GetAtt MyRDDBServer.Endpoint.Address         
